{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ideep\\\\OneDrive\\\\Desktop\\\\New folder\\\\InfoPulse\\\\frontend\\\\src\\\\components\\\\ResultCard.js\";\n// import React from 'react';\n// import './ResultCard.css';\n\n// const ResultCard = ({ result }) => {\n//     return (\n//         <div className=\"result-card\">\n//             <h3>{result.title || result.snippet}</h3>\n//             <p>{result.description || result.snippet}</p>\n//             {result.type === 'youtube' && (\n//                 <a href={`https://www.youtube.com/watch?v=${result.id.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Watch Video\n//                 </a>\n//             )}\n//             {result.type === 'google' && (\n//                 <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Read More\n//                 </a>\n//             )}\n//             {result.type === 'paper' && (\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     View Paper\n//                 </a>\n//             )}\n//             {result.type === 'blog' && (\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Read Blog\n//                 </a>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ResultCard;\n\n// import React from 'react';\n// import './ResultCard.css';\n\n// const ResultCard = ({ result }) => {\n//     // Handle possible missing values in result object\n//     const title = result.title || result.snippet || \"No title available\";\n//     const description = result.description || result.snippet || \"No description available\";\n\n//     return (\n//         <div className=\"result-card\">\n//             <h3>{title}</h3>\n//             <p>{description}</p>\n\n//             {/* Conditional rendering based on the result type */}\n//             {result.type === 'youtube' && result.id && result.id.videoId && (\n//                 <a href={`https://www.youtube.com/watch?v=${result.id.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Watch Video\n//                 </a>\n//             )}\n\n//             {result.type === 'google' && result.link && (\n//                 <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Read More\n//                 </a>\n//             )}\n\n//             {result.type === 'paper' && result.url && (\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     View Paper\n//                 </a>\n//             )}\n\n//             {result.type === 'blog' && result.url && (\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                     Read Blog\n//                 </a>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ResultCard;\n\nimport React from 'react';\nimport './ResultCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultCard = ({\n  result\n}) => {\n  var _result$snippet, _result$snippet2, _result$id;\n  // Ensure you're accessing the correct fields and only rendering primitives (strings, numbers)\n  const title = result.title || ((_result$snippet = result.snippet) === null || _result$snippet === void 0 ? void 0 : _result$snippet.title) || 'No title available';\n  const description = result.description || ((_result$snippet2 = result.snippet) === null || _result$snippet2 === void 0 ? void 0 : _result$snippet2.description) || 'No description available';\n  const url = result.url || result.link && result.link || ((_result$id = result.id) === null || _result$id === void 0 ? void 0 : _result$id.videoId) && `https://www.youtube.com/watch?v=${result.id.videoId}`;\n\n  // Log the result to understand its structure\n  console.log(\"Rendering result:\", result);\n\n  // Additional condition to prevent rendering if required fields are missing\n  if (!title || !url) {\n    return null;\n  }\n\n  // Function to get the link text based on type\n  const getLinkText = () => {\n    switch (result.type) {\n      case 'youtube':\n        return 'Watch Video';\n      case 'google':\n        return 'Read More';\n      case 'paper':\n        return 'View Paper';\n      case 'blog':\n        return 'Read Blog';\n      default:\n        return 'Visit Link';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), url && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: getLinkText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_c = ResultCard;\nexport default ResultCard;\nvar _c;\n$RefreshReg$(_c, \"ResultCard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ResultCard","result","_result$snippet","_result$snippet2","_result$id","title","snippet","description","url","link","id","videoId","console","log","getLinkText","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/ideep/OneDrive/Desktop/New folder/InfoPulse/frontend/src/components/ResultCard.js"],"sourcesContent":["// import React from 'react';\r\n// import './ResultCard.css';\r\n\r\n// const ResultCard = ({ result }) => {\r\n//     return (\r\n//         <div className=\"result-card\">\r\n//             <h3>{result.title || result.snippet}</h3>\r\n//             <p>{result.description || result.snippet}</p>\r\n//             {result.type === 'youtube' && (\r\n//                 <a href={`https://www.youtube.com/watch?v=${result.id.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Watch Video\r\n//                 </a>\r\n//             )}\r\n//             {result.type === 'google' && (\r\n//                 <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Read More\r\n//                 </a>\r\n//             )}\r\n//             {result.type === 'paper' && (\r\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     View Paper\r\n//                 </a>\r\n//             )}\r\n//             {result.type === 'blog' && (\r\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Read Blog\r\n//                 </a>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ResultCard;\r\n\r\n\r\n// import React from 'react';\r\n// import './ResultCard.css';\r\n\r\n// const ResultCard = ({ result }) => {\r\n//     // Handle possible missing values in result object\r\n//     const title = result.title || result.snippet || \"No title available\";\r\n//     const description = result.description || result.snippet || \"No description available\";\r\n\r\n//     return (\r\n//         <div className=\"result-card\">\r\n//             <h3>{title}</h3>\r\n//             <p>{description}</p>\r\n\r\n//             {/* Conditional rendering based on the result type */}\r\n//             {result.type === 'youtube' && result.id && result.id.videoId && (\r\n//                 <a href={`https://www.youtube.com/watch?v=${result.id.videoId}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Watch Video\r\n//                 </a>\r\n//             )}\r\n\r\n//             {result.type === 'google' && result.link && (\r\n//                 <a href={result.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Read More\r\n//                 </a>\r\n//             )}\r\n\r\n//             {result.type === 'paper' && result.url && (\r\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     View Paper\r\n//                 </a>\r\n//             )}\r\n\r\n//             {result.type === 'blog' && result.url && (\r\n//                 <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                     Read Blog\r\n//                 </a>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ResultCard;\r\n\r\n\r\nimport React from 'react';\r\nimport './ResultCard.css';\r\n\r\nconst ResultCard = ({ result }) => {\r\n    // Ensure you're accessing the correct fields and only rendering primitives (strings, numbers)\r\n    const title = result.title || result.snippet?.title || 'No title available';\r\n    const description = result.description || result.snippet?.description || 'No description available';\r\n    const url = result.url || (result.link && result.link) || (result.id?.videoId && `https://www.youtube.com/watch?v=${result.id.videoId}`);\r\n\r\n    // Log the result to understand its structure\r\n    console.log(\"Rendering result:\", result);\r\n\r\n    // Additional condition to prevent rendering if required fields are missing\r\n    if (!title || !url) {\r\n        return null;\r\n    }\r\n\r\n    // Function to get the link text based on type\r\n    const getLinkText = () => {\r\n        switch (result.type) {\r\n            case 'youtube':\r\n                return 'Watch Video';\r\n            case 'google':\r\n                return 'Read More';\r\n            case 'paper':\r\n                return 'View Paper';\r\n            case 'blog':\r\n                return 'Read Blog';\r\n            default:\r\n                return 'Visit Link';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"result-card\">\r\n            <h3>{title}</h3>\r\n            <p>{description}</p>\r\n            {url && (\r\n                <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {getLinkText()}\r\n                </a>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultCard;\r\n\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,UAAA;EAC/B;EACA,MAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAK,MAAAH,eAAA,GAAID,MAAM,CAACK,OAAO,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBG,KAAK,KAAI,oBAAoB;EAC3E,MAAME,WAAW,GAAGN,MAAM,CAACM,WAAW,MAAAJ,gBAAA,GAAIF,MAAM,CAACK,OAAO,cAAAH,gBAAA,uBAAdA,gBAAA,CAAgBI,WAAW,KAAI,0BAA0B;EACnG,MAAMC,GAAG,GAAGP,MAAM,CAACO,GAAG,IAAKP,MAAM,CAACQ,IAAI,IAAIR,MAAM,CAACQ,IAAK,IAAK,EAAAL,UAAA,GAAAH,MAAM,CAACS,EAAE,cAAAN,UAAA,uBAATA,UAAA,CAAWO,OAAO,KAAI,mCAAmCV,MAAM,CAACS,EAAE,CAACC,OAAO,EAAG;;EAExI;EACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEZ,MAAM,CAAC;;EAExC;EACA,IAAI,CAACI,KAAK,IAAI,CAACG,GAAG,EAAE;IAChB,OAAO,IAAI;EACf;;EAEA;EACA,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACtB,QAAQb,MAAM,CAACc,IAAI;MACf,KAAK,SAAS;QACV,OAAO,aAAa;MACxB,KAAK,QAAQ;QACT,OAAO,WAAW;MACtB,KAAK,OAAO;QACR,OAAO,YAAY;MACvB,KAAK,MAAM;QACP,OAAO,WAAW;MACtB;QACI,OAAO,YAAY;IAC3B;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAKiB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBlB,OAAA;MAAAkB,QAAA,EAAKZ;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBtB,OAAA;MAAAkB,QAAA,EAAIV;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBb,GAAG,iBACAT,OAAA;MAAGuB,IAAI,EAAEd,GAAI;MAACe,MAAM,EAAC,QAAQ;MAACC,GAAG,EAAC,qBAAqB;MAAAP,QAAA,EAClDH,WAAW,CAAC;IAAC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACI,EAAA,GAzCIzB,UAAU;AA2ChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}